{"version":3,"sources":["App.js","Wrapper.jsx","reportWebVitals.js","index.js"],"names":["App","console","log","useState","countOne","setCountOne","countTwo","setCountTwo","useEffect","warn","timer","setInterval","clearInterval","className","onClick","Wrapper","show","setShow","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNAiDeA,MA3Cf,WACEC,QAAQC,IAAI,uBAEZ,MAAgCC,mBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAgCF,mBAAS,GAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KA4BA,OA1BAC,qBAAU,WACRP,QAAQC,IAAI,+BAIdM,qBAAU,WACRP,QAAQC,IAAI,6BAEX,CAACE,IACJI,qBAAU,WACRP,QAAQQ,KAAK,qCAEb,IAAMC,EAAQC,aAAY,WACxBV,QAAQC,IAAI,UACX,KAIH,OAAO,WACLD,QAAQC,IAAI,+CACZU,cAAcF,MAIf,IAGD,sBAAKG,UAAU,MAAf,UACM,yBAAQC,QAAS,kBAAKT,EAAYD,EAAW,IAA7C,iBACOA,KACP,yBAAQU,QAAS,kBAAKP,EAAYD,EAAW,IAA7C,iBACOA,SCzCF,SAASS,IAEpB,MAAwBZ,oBAAS,GAAjC,mBAAOa,EAAP,KAAaC,EAAb,KACA,OACI,gCACKD,EAAM,cAAC,EAAD,IAAO,KACd,wBAAQF,QAAS,kBAAKG,GAASD,IAA/B,gCCRZ,IAYeE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACd,EAAD,MAEFe,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.6ad8d475.chunk.js","sourcesContent":["import './App.css';\nimport React, { useState, useEffect } from \"react\"\n\n\n\n\nfunction App(){\n  console.log(\"App is being render\")\n\n  const [countOne, setCountOne] = useState(0)\n  const [countTwo, setCountTwo] = useState(0)\n\n  useEffect(()=> {\n    console.log(\"App useEffect is running\")\n    // setCountTwo(countTwo + 1)\n  })\n\n  useEffect(()=> {\n    console.log(\"App countOne has change\")\n    // setCountTwo(countTwo + 1)\n  }, [countOne])\n  useEffect(()=> {\n    console.warn(\"App third has change... only once\")\n    // setCountTwo(countTwo + 1)\n    const timer = setInterval(()=> {\n      console.log(\"tick\")\n    }, 1000)\n\n    // const pre = document.querySelector(\"#root\");\n    // pre.innerText = pre.innerText + \"\\nApp is Active\"\n    return function cleanup() {\n      console.log(\"....App third useEffect  cleanup is running\")\n      clearInterval(timer)\n      // pre.innerText = pre.innerText + \"\\nApp is Inactive\"\n\n    }\n  }, [])\n\n  return(\n    <div className=\"App\">\n          <button onClick={()=> setCountOne(countOne + 1)}>\n            one {countOne}</button>\n          <button onClick={()=> setCountTwo(countTwo + 1)}>\n            two {countTwo}</button>\n\n</div>\n\n  )\n}\nexport default App;\n","import App from \"./App.js\"\nimport {useState } from \"react\"\nexport default function Wrapper() {\n\n    const [show, setShow] = useState(false)\n    return (\n        <div>\n            {show? <App/>:null}\n            <button onClick={()=> setShow(!show)}>\n                Toggle Counters</button>\n        </div>\n    )\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Wrapper from \"./Wrapper.jsx\"\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Wrapper/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}